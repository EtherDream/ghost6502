{"version":3,"file":"ghost6502.js","sourceRoot":"","sources":["../src/ghost6502.ts"],"names":[],"mappings":"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","sourcesContent":["type NumLike = {\n  [Symbol.toPrimitive]: (hint: string) => number\n}\ntype Num = number | NumLike\ntype Reg = Uint8Array | Int8Array | Uint16Array | Uint32Array | Int32Array\ntype Fn = () => number\ntype FnVoid = () => void\ntype Uop = Fn | FnVoid\ntype Uops = Uop[]\n\nexport const enum STATUS {\n  C = 1 << 0,\n  Z = 1 << 1,\n  I = 1 << 2,\n  D = 1 << 3,\n  B = 1 << 4,\n  _ = 1 << 5,\n  V = 1 << 6,\n  N = 1 << 7,\n  DEFAULT = _ | B,\n}\n\nfunction num_like(fn: Fn) : NumLike {\n  return {\n    [Symbol.toPrimitive]: fn\n  }\n}\n\nfunction bind(fn: Function, ctx: any, ...args: any[]) {\n  // TODO: reuse same clousures\n  return fn.bind(ctx, ...args)\n}\n\nfunction static_bind(fn: Function, ...args: any[]) {\n  return bind(fn, 0, ...args)\n}\n\nfunction arr_get<T>(arr: T[], idx: Num) : () => T {\n  // assuming no undefined\n  return bind(arr.at, arr, idx as number)\n}\n\nfunction int_arr_get(arr: Reg, idx: Num) : Fn {\n  return static_bind(Atomics.load, arr, idx)\n}\n\nfunction int_arr_set(arr: Reg, idx: Num, val: Num) : Fn {\n  return static_bind(Atomics.store, arr, idx, val)\n}\n\ntype RegOp = (reg: Reg, val: Num) => Fn\n\nconst reg_add: RegOp = (r, v) => static_bind(Atomics.add, r, 0, v)\nconst reg_sub: RegOp = (r, v) => static_bind(Atomics.sub, r, 0, v)\nconst reg_or : RegOp = (r, v) => static_bind(Atomics.or , r, 0, v)\nconst reg_and: RegOp = (r, v) => static_bind(Atomics.and, r, 0, v)\nconst reg_xor: RegOp = (r, v) => static_bind(Atomics.xor, r, 0, v)\n\nconst reg_store: RegOp = (r, v) => int_arr_set(r, 0, v)\n\nfunction reg_mov(dst: Reg, src: Reg) : FnVoid {\n  return bind(dst.set, dst, src, 0)\n}\n\nfunction reg_load(reg: Reg) : NumLike {\n  return num_like(\n    int_arr_get(reg, 0)\n  )\n}\nfunction reg_inc(reg: Reg) : NumLike {\n  return num_like(\n    reg_add(reg, 1)\n  )\n}\nfunction imul(x: Num, y: Num) : NumLike {\n  return num_like(\n    static_bind(Math.imul, x, y)\n  )\n}\n\nconst pc    = Uint16Array.of(0)\nconst pc_h  = new Uint8Array(pc.buffer, 1, 1)\nconst pc_l  = new Uint8Array(pc.buffer, 0, 1)\n\nconst a32   = Uint32Array.of(0)\nconst a16_h = new Uint16Array(a32.buffer, 2, 1)\nconst a16   = new Uint16Array(a32.buffer, 0, 1)\nconst a_h   = new Uint8Array(a32.buffer, 1, 1)\nconst a     = new Uint8Array(a32.buffer, 0, 1)\n\nconst b16   = Uint16Array.of(0)\nconst b_h   = new Uint8Array(b16.buffer, 1, 1)\nconst b     = new Uint8Array(b16.buffer, 0, 1)\n\nconst c16   = Uint16Array.of(0)\nconst c_h   = new Uint8Array(c16.buffer, 1, 1)\nconst c     = new Uint8Array(c16.buffer, 0, 1)\n\nconst d16   = Uint16Array.of(0)\nconst d_h   = new Uint8Array(d16.buffer, 1, 1)\nconst d     = new Uint8Array(d16.buffer, 0, 1)\n\nconst x16   = Uint16Array.of(0)\nconst x_h   = new Uint8Array(x16.buffer, 1, 1)\nconst x     = new Uint8Array(x16.buffer, 0, 1)\n\nconst y16   = Uint16Array.of(0)\nconst y_h   = new Uint8Array(y16.buffer, 1, 1)\nconst y     = new Uint8Array(y16.buffer, 0, 1)\n\nconst sp16  = Uint16Array.of(0x01FF)\nconst sp    = new Uint8Array(sp16.buffer, 0, 1)\n\nconst sr    = Uint8Array.of(STATUS.DEFAULT)\n\nconst load_pc   = reg_load(pc)\nconst load_pc_l = reg_load(pc_l)\nconst load_pc_h = reg_load(pc_h)\n\nconst load_a    = reg_load(a)\nconst load_b    = reg_load(b)\nconst load_c    = reg_load(c)\nconst load_d    = reg_load(d)\nconst load_x    = reg_load(x)\nconst load_y    = reg_load(y)\nconst load_sp   = reg_load(sp)\nconst load_sr   = reg_load(sr)\n\nconst load_sp16 = reg_load(sp16)\nconst load_a32  = reg_load(a32)\nconst load_a16  = reg_load(a16)\nconst load_b16  = reg_load(b16)\nconst load_d16  = reg_load(d16)\nconst load_x16  = reg_load(x16)\nconst load_y16  = reg_load(y16)\n\n\nconst set_flag = (flag: Num, reg = sr) => reg_or(reg, flag)\nconst clr_flag = (flag: Num, reg = sr) => reg_and(reg, ~flag)\n\nconst update_sr = (flag_clr: STATUS, flag_set: Num) => [\n  clr_flag(flag_clr),\n  set_flag(flag_set),\n]\n\nconst cache_nz_flag = new Uint8Array(256)\nfor (let i = 128; i < 256; i++) {\n  cache_nz_flag[i] = STATUS.N\n}\ncache_nz_flag[0] = STATUS.Z\n\n\nfunction update_nz(val: Num) : Fn[] {\n  return update_sr(STATUS.N | STATUS.Z, num_like(\n    int_arr_get(cache_nz_flag, val)\n  ))\n}\n\nfunction reg_store_nz(reg: Reg, val: Num) : Fn[] {\n  return update_nz(num_like(\n    reg_store(reg, val)\n  ))\n}\n\n\nconst mem = new Uint8Array(65536)\n\nfunction gen_bus_read_mem_prop(addr: number) {\n  return {\n    get: int_arr_get(mem, addr),\n    configurable: true,\n  }\n}\n\nfunction gen_bus_write_mem_prop(addr: number) {\n  return {\n    get: int_arr_set(mem, addr, load_d),\n    configurable: true,\n  }\n}\n\nfunction create_bus_reader() : number[] {\n  const props: PropertyDescriptorMap = {}\n\n  for (let addr = 0; addr < 65536; addr++) {\n    props[addr] = gen_bus_read_mem_prop(addr)\n  }\n  return Object.defineProperties([], props)\n}\n\nfunction create_bus_writer() : number[] {\n  const props: PropertyDescriptorMap = {}\n\n  for (let addr = 0; addr < 65536; addr++) {\n    props[addr] = gen_bus_write_mem_prop(addr)\n  }\n  return Object.defineProperties([], props)\n}\n\nconst bus_reader = create_bus_reader()\nconst bus_writer = create_bus_writer()\n\nfunction write_d_to_addr(addr: Num) : Fn {\n  return arr_get(bus_writer, addr)\n}\nfunction write_addr(addr: Num, reg: Reg) : FnVoid[] {\n  return [\n    reg_mov(d, reg),\n    write_d_to_addr(addr),\n  ]\n}\n\nfunction load_addr(addr: Num) : NumLike {\n  return num_like(\n    arr_get(bus_reader, addr)\n  )\n}\nconst load_b_ptr    = load_addr(load_b)\nconst load_b16_ptr  = load_addr(load_b16)\nconst load_d_ptr    = load_addr(load_d)\nconst load_sp16_ptr = load_addr(load_sp16)\n\nconst fetch_op      = load_addr(reg_inc(pc))\nconst fetch_op_ptr  = load_addr(fetch_op)\n\nconst read_d_ptr    = load_addr(reg_inc(d))\nconst read_b16_ptr  = load_addr(reg_inc(b16))\n\n\nfunction push(reg: Reg) : FnVoid[] {\n  return [\n    ...write_addr(load_sp16, reg),\n    reg_sub(sp, 1),\n  ]\n}\nconst push_d: Fn[] = [\n  write_d_to_addr(load_sp16),\n  reg_sub(sp, 1),\n]\n\nconst fetch_2op_to_b16 : Fn[] = [\n  reg_store(b,   fetch_op),\n  reg_store(b_h, fetch_op),\n]\nconst read_d_ptr_to_b16 : Fn[] = [\n  reg_store(b  , read_d_ptr),\n  reg_store(b_h, load_d_ptr),\n]\n\nconst halt: Fn = static_bind(Number, 0xDEADC0DE)\n\nconst BRK = [ halt ]\nconst NOP: Uops = []\n\n//\n// flag\n//\nconst CLC = [ clr_flag(STATUS.C) ]\nconst CLD = [ clr_flag(STATUS.D) ]\nconst CLI = [ clr_flag(STATUS.I) ]\nconst CLV = [ clr_flag(STATUS.V) ]\n\nconst SEC = [ set_flag(STATUS.C) ]\nconst SED = [ set_flag(STATUS.D) ]\nconst SEI = [ set_flag(STATUS.I) ]\n\n//\n// stack\n//\nconst PHA = [\n  ...push(a),\n]\n\nconst PLA = [\n  reg_add(sp, 1),\n  reg_store(a, load_sp16_ptr),\n  ...reg_store_nz(a, load_a),\n]\n\nconst PHP = [\n  reg_mov(d, sr),\n  set_flag(STATUS._ | STATUS.B, d),\n  write_d_to_addr(load_sp16),\n  reg_sub(sp, 1),\n]\n\nconst PLP = [\n  reg_store(sr, load_sp16_ptr),\n  clr_flag(STATUS._ | STATUS.B),\n  reg_add(sp, 1),\n]\n\n//\n// jump\n//\nconst JMP_ABS = [\n  ...fetch_2op_to_b16,\n  reg_mov(pc, b16),\n]\n\nconst JMP_IND = [\n  ...fetch_2op_to_b16,\n  reg_store(pc_l, read_b16_ptr),\n  reg_store(pc_h, load_b16_ptr),\n]\n\nconst JSR = [\n  reg_mov(d16, pc),\n  reg_add(d16, 2),\n  ...push_d,\n  reg_mov(d, d_h),\n  ...push_d,\n  ...fetch_2op_to_b16,\n  reg_mov(pc, b16),\n]\n\nconst RTS = [\n  reg_add(sp, 1),\n  reg_store(pc_h, load_sp16_ptr),\n  reg_add(sp, 1),\n  reg_store(pc_l, load_sp16_ptr),\n]\n\nconst RTI = [\n  reg_add(sp, 1),\n  reg_store(sr, load_sp16_ptr),\n  reg_add(sp, 1),\n  reg_store(pc_l, load_sp16_ptr),\n  reg_add(sp, 1),\n  reg_store(pc_h, load_sp16_ptr),\n  halt,\n]\n\n//\n// branch\n//\nconst int8 = new Int8Array(256)\nfor (let i = 0; i < 256; i++) {\n  int8[i] = i\n}\n\nconst fetch_op_i8 = num_like(\n  int_arr_get(int8, fetch_op)\n)\nconst pc_add_fetch_op_i8 = reg_add(pc, fetch_op_i8)\nconst pc_add_1 = reg_add(pc, 1)\n\n\nfunction branch_impl(flag: STATUS, is_set: boolean) {\n  const props: PropertyDescriptorMap = {}\n\n  for (let i = 0; i < 256; i++) {\n    const on = !!(i & flag) === is_set\n    const fn = on ? pc_add_fetch_op_i8 : pc_add_1\n    props[i] = {get: fn}\n  }\n  const triggler = Object.defineProperties([], props)\n\n  return [\n    arr_get(triggler, load_sr),\n  ]\n}\nconst BCS = branch_impl(STATUS.C, true)\nconst BCC = branch_impl(STATUS.C, false)\n\nconst BEQ = branch_impl(STATUS.Z, true)\nconst BNE = branch_impl(STATUS.Z, false)\n\nconst BVS = branch_impl(STATUS.V, true)\nconst BVC = branch_impl(STATUS.V, false)\n\nconst BMI = branch_impl(STATUS.N, true)\nconst BPL = branch_impl(STATUS.N, false)\n\n\nclass AddrMode {\n  // calculate the address of the operand and save it to b16\n  calc_addr() : Uops {\n    return []\n  }\n\n  // for STA, STX, STY\n  get_store_addr() : NumLike {\n    throw 'not implemented'\n  }\n\n  get_operand() : NumLike {\n    throw 'not implemented'\n  }\n\n  // `save_operand_to_d` and `get_operand_addr` are used in pairs\n  save_operand_to_d() : Uops {\n    throw 'not implemented'\n  }\n  get_operand_addr() : NumLike {\n    throw 'not implemented'\n  }\n}\nclass AddrModeImm extends AddrMode {\n  get_operand() {\n    return fetch_op\n  }\n}\nclass AddrModeZpg extends AddrMode {\n  get_store_addr() {\n    return fetch_op\n  }\n  get_operand() {\n    return fetch_op_ptr\n  }\n  save_operand_to_d() {\n    return [\n      reg_store(b, fetch_op),\n      reg_store(d, load_b_ptr),\n    ]\n  }\n  get_operand_addr() {\n    return load_b\n  }\n}\nclass AddrModeZpgX extends AddrModeZpg {\n  calc_addr() {\n    return [\n      reg_store(b, fetch_op),\n      reg_add(b, load_x),\n    ]\n  }\n  get_store_addr() {\n    return load_b\n  }\n  get_operand() {\n    return load_b_ptr\n  }\n  save_operand_to_d() {\n    return [\n      ...this.calc_addr(),\n      reg_store(d, load_b_ptr),\n    ]\n  }\n}\nclass AddrModeZpgY extends AddrModeZpgX {\n  calc_addr() {\n    return [\n      reg_store(b16, fetch_op),\n      reg_add(b16, load_y),\n    ]\n  }\n}\nclass AddrModeAbs extends AddrMode {\n  calc_addr() {\n    return [\n      ...fetch_2op_to_b16,\n    ]\n  }\n  get_store_addr() {\n    return load_b16\n  }\n  get_operand() {\n    return load_b16_ptr\n  }\n  save_operand_to_d() {\n    return [\n      ...this.calc_addr(),\n      reg_store(d, load_b16_ptr),\n    ]\n  }\n  get_operand_addr() {\n    return load_b16\n  }\n}\nclass AddrModeAbsX extends AddrModeAbs {\n  calc_addr() {\n    return [\n      ...super.calc_addr(),\n      reg_add(b16, load_x),\n    ]\n  }\n}\nclass AddrModeAbsY extends AddrModeAbs {\n  calc_addr() {\n    return [\n      ...super.calc_addr(),\n      reg_add(b16, load_y),\n    ]\n  }\n}\nclass AddrModeIndX extends AddrModeAbs {\n  calc_addr() {\n    return [\n      reg_store(d, fetch_op),\n      reg_add(d, load_x),\n      ...read_d_ptr_to_b16,\n    ]\n  }\n}\nclass AddrModeIndY extends AddrModeAbs {\n  calc_addr() {\n    return [\n      reg_store(d, fetch_op),\n      ...read_d_ptr_to_b16,\n      reg_add(b16, load_y),\n    ]\n  }\n}\nconst IMM   = new AddrModeImm()\nconst ZPG   = new AddrModeZpg()\nconst ZPG_X = new AddrModeZpgX()\nconst ZPG_Y = new AddrModeZpgY()\nconst ABS   = new AddrModeAbs()\nconst ABS_X = new AddrModeAbsX()\nconst ABS_Y = new AddrModeAbsY()\nconst IND_X = new AddrModeIndX()\nconst IND_Y = new AddrModeIndY()\n\n\nconst load_reg_impl = (reg: Reg, mode: AddrMode) => [\n  ...mode.calc_addr(),\n  ...reg_store_nz(reg, mode.get_operand()),\n]\nconst LDA = (mode: AddrMode) => load_reg_impl(a, mode)\nconst LDX = (mode: AddrMode) => load_reg_impl(x, mode)\nconst LDY = (mode: AddrMode) => load_reg_impl(y, mode)\n\n\nconst store_reg_impl = (reg: Reg, mode: AddrMode) => [\n  // TODO: optimized to write_addr_d()\n  ...mode.calc_addr(),\n  ...write_addr(mode.get_store_addr(), reg),\n]\nconst STA = (mode: AddrMode) => store_reg_impl(a, mode)\nconst STX = (mode: AddrMode) => store_reg_impl(x, mode)\nconst STY = (mode: AddrMode) => store_reg_impl(y, mode)\n\n\nconst TAX = reg_store_nz(x, load_a)\nconst TXA = reg_store_nz(a, load_x)\n\nconst TAY = reg_store_nz(y, load_a)\nconst TYA = reg_store_nz(a, load_y)\n\nconst TSX = reg_store_nz(x, load_sp)\nconst TXS = [ reg_mov(sp, x) ]\n\n\nconst inc_impl = (mode: AddrMode, n: number) => [\n  ...mode.save_operand_to_d(),\n  reg_add(d, n),\n  ...update_nz(num_like(\n    write_d_to_addr(mode.get_operand_addr()),\n  )),\n]\nconst INC = (mode: AddrMode) => inc_impl(mode, +1)\nconst DEC = (mode: AddrMode) => inc_impl(mode, -1)\n\n\nconst inx_impl = (reg: Reg, load_reg: NumLike, n: number) => [\n  reg_add(reg, n),\n  ...reg_store_nz(reg, load_reg),\n]\nconst INX = inx_impl(x, load_x, +1)\nconst INY = inx_impl(y, load_y, +1)\n\nconst DEX = inx_impl(x, load_x, -1)\nconst DEY = inx_impl(y, load_y, -1)\n\n//\n// Compare (CMP, CPX, CPY)\n//\nconst cache_cmp_flag = new Uint8Array(65536)\n\nfor (let m = 0; m < 256; m++) {\n  for (let a = 0; a < 256; a++) {\n    const diff = a - m\n    const sr_c = diff >= 0  ? STATUS.C : 0\n    const sr_n = diff > 127 ? STATUS.N : 0\n    const sr_z = diff === 0 ? STATUS.Z : 0\n    cache_cmp_flag[m << 8 | a] = sr_c | sr_n | sr_z\n  }\n}\n\nfunction cmp_impl(load_reg16: NumLike, reg_h: Reg, mode: AddrMode) {\n  return [\n    ...mode.calc_addr(),\n    reg_store(reg_h, mode.get_operand()),\n\n    ...update_sr(STATUS.N | STATUS.Z | STATUS.C, num_like(\n      int_arr_get(cache_cmp_flag, load_reg16)\n    ))\n  ]\n}\nconst CMP = (mode: AddrMode) => cmp_impl(load_a16, a_h, mode)\nconst CPX = (mode: AddrMode) => cmp_impl(load_x16, x_h, mode)\nconst CPY = (mode: AddrMode) => cmp_impl(load_y16, y_h, mode)\n\n//\n// Bitwise (ORA, AND, EOR, BIT)\n//\nfunction bitwise_impl(fn: RegOp, mode: AddrMode) {\n  return [\n    ...mode.calc_addr(),\n    fn(a, mode.get_operand()),\n    ...update_nz(load_a),\n  ]\n}\nconst ORA = (mode: AddrMode) => bitwise_impl(reg_or , mode)\nconst AND = (mode: AddrMode) => bitwise_impl(reg_and, mode)\nconst EOR = (mode: AddrMode) => bitwise_impl(reg_xor, mode)\n\n\nconst cache_bit_flag = new Uint8Array(65536)\n\nfor (let m = 0; m < 256; m++) {\n  for (let a = 0; a < 256; a++) {\n    const zero = (a & m) ? 0 : STATUS.Z\n    const m7m6 = m & 0b1100_0000\n    cache_bit_flag[m << 8 | a] = m7m6 | zero\n  }\n}\nfunction BIT(mode: AddrMode) {\n  return [\n    ...mode.calc_addr(),\n    reg_store(a_h, mode.get_operand()),\n    ...update_sr(STATUS.N | STATUS.V | STATUS.Z, num_like(\n      int_arr_get(cache_bit_flag, load_a16)\n    )),\n  ]\n}\n\n//\n// Shift (ASL, LSR)\n//\nconst cache_shl_flag = new Uint8Array(512)\n\nfor (let i = 0; i < 512; i++) {\n  const sr_c = i > 255 ? STATUS.C : 0\n  const sr_n = i & 128 ? STATUS.N : 0\n  const sr_z = i & 255 ? 0 : STATUS.Z\n  cache_shl_flag[i] = sr_c | sr_n | sr_z\n}\n\nconst shl_reg = (reg: Reg, load_reg: NumLike) =>\n  update_sr(STATUS.N | STATUS.Z | STATUS.C, num_like(\n    int_arr_get(cache_shl_flag, num_like(\n      reg_store(reg, imul(load_reg, 2))\n    ))\n  ))\n\nconst cache_shr_flag = new Uint8Array(512)\nconst cache_shr_result = new Uint8Array(512)\n\nfor (let i = 0; i < 512; i++) {\n  const sr_c = i & 1   ? STATUS.C : 0\n  const sr_n = i > 255 ? STATUS.N : 0\n  const sr_z = i < 2   ? STATUS.Z : 0\n\n  cache_shr_flag[i] = sr_c | sr_n |  sr_z\n  cache_shr_result[i] = i >> 1\n}\n\nconst shr_reg = (reg: Reg, load_reg: NumLike) => [\n  ...update_sr(STATUS.N | STATUS.Z | STATUS.C, num_like(\n    int_arr_get(cache_shr_flag, load_reg)\n  )),\n  reg_store(reg, num_like(\n    int_arr_get(cache_shr_result, load_reg)\n  )),\n]\n\nconst shift_impl = (fn: typeof shl_reg, mode: AddrMode) => [\n  ...mode.save_operand_to_d(),\n  ...fn(d, load_d),\n  write_d_to_addr(mode.get_operand_addr()),\n]\n\nconst ASL = (mode: AddrMode) => shift_impl(shl_reg, mode)\nconst LSR = (mode: AddrMode) => shift_impl(shr_reg, mode)\n\nconst ASL_A = shl_reg(a, load_a)\nconst LSR_A = shr_reg(a, load_a)\n\n//\n// Rotate (ROL, ROR)\n//\nconst ROL_A = [\n  reg_mov(c, sr),\n  reg_and(c, 1),\n  ...shl_reg(a, load_a),\n  reg_or(a, load_c),\n]\n\nconst ROL = (mode: AddrMode) => [\n  reg_mov(c, sr),\n  reg_and(c, 1),\n  ...mode.save_operand_to_d(),\n  ...shl_reg(d, load_d),\n  reg_or(d, load_c),\n  write_d_to_addr(mode.get_operand_addr()),\n]\n\nconst ROR_A = [\n  reg_mov(b_h, sr),\n  reg_and(b_h, STATUS.C),\n  reg_mov(b, a),\n  ...shr_reg(a, load_b16),\n]\n\nconst ROR = (mode: AddrMode) => [\n  reg_mov(d_h, sr),\n  reg_and(d_h, STATUS.C),\n  ...mode.save_operand_to_d(),\n  ...shr_reg(d, load_d16),\n  write_d_to_addr(mode.get_operand_addr()),\n]\n\n//\n// Math (ADC, SBC)\n//\nconst cache_adc_flag = new Uint8Array(2 * 256 * 256)\nconst cache_adc_result = new Uint8Array(2 * 256 * 256)\n\nconst cache_sbc_flag = new Uint8Array(2 * 256 * 256)\nconst cache_sbc_result = new Uint8Array(2 * 256 * 256)\n\nfor (let c = 0; c <= 1; c++) {\n  for (let m = 0; m < 256; m++) {\n    for (let a = 0; a < 256; a++) {\n      const pos = c << 16 | m << 8 | a\n\n      // ADC\n      const sum = a + m + c\n      const sum_i = int8[a] + int8[m] + c\n\n      const sum_sr_c = sum > 255 ? STATUS.C : 0\n      const sum_sr_n = sum & 128 ? STATUS.N : 0\n      const sum_sr_z = sum === 0 ? STATUS.Z : 0\n      const sum_sr_v = (sum_i > 127 || sum_i < -128) ? STATUS.V : 0\n\n      cache_adc_flag[pos] = sum_sr_c | sum_sr_n | sum_sr_z | sum_sr_v\n      cache_adc_result[pos] = sum\n\n      // SBC\n      const diff = a - m - (1 - c)\n      const diff_i = int8[a] - int8[m] - (1 - c)\n\n      const diff_sr_c = diff < 0   ? 0 : STATUS.C\n      const diff_sr_z = diff & 255 ? 0 : STATUS.Z\n      const diff_sr_n = diff & 128 ? STATUS.N : 0\n      const diff_sr_v = (diff_i > 127 || diff_i < -128) ? STATUS.V : 0\n\n      cache_sbc_result[pos] = diff\n      cache_sbc_flag[pos] = diff_sr_c | diff_sr_n | diff_sr_z | diff_sr_v\n    }\n  }\n}\n\nfunction adc_sbc_impl(mode: AddrMode, is_adc: boolean) {\n  const flags = is_adc ? cache_adc_flag : cache_sbc_flag\n  const results = is_adc ? cache_adc_result : cache_sbc_result\n\n  return [\n    reg_mov(a16_h, sr),\n    reg_and(a16_h, 1),\n\n    ...mode.calc_addr(),\n    reg_store(a_h, mode.get_operand()),\n\n    ...update_sr(STATUS.C | STATUS.N | STATUS.Z | STATUS.V, num_like(\n      int_arr_get(flags, load_a32)\n    )),\n    reg_store(a, num_like(\n      int_arr_get(results, load_a32)\n    )),\n  ]\n}\nconst ADC = (mode: AddrMode) => adc_sbc_impl(mode, true)\nconst SBC = (mode: AddrMode) => adc_sbc_impl(mode, false)\n\n//\n// https://www.masswerk.at/6502/6502_instruction_set.html\n//\nconst OP_TABLE: (Uops | undefined)[] = [\n  /*       -0      , -1        , -2      ,, -4        , -5        , -6        ,, -8 , -9        , -A   ,, -C        , -D        , -E        */\n  /* 0- */ BRK     , ORA(IND_X),         ,,           , ORA(ZPG)  , ASL(ZPG)  ,, PHP, ORA(IMM)  , ASL_A,,           , ORA(ABS)  , ASL(ABS)  ,,\n  /* 1- */ BPL     , ORA(IND_Y),         ,,           , ORA(ZPG_X), ASL(ZPG_X),, CLC, ORA(ABS_Y),      ,,           , ORA(ABS_X), ASL(ABS_X),,\n  /* 2- */ JSR     , AND(IND_X),         ,, BIT(ZPG)  , AND(ZPG)  , ROL(ZPG)  ,, PLP, AND(IMM)  , ROL_A,, BIT(ABS)  , AND(ABS)  , ROL(ABS)  ,,\n  /* 3- */ BMI     , AND(IND_Y),         ,,           , AND(ZPG_X), ROL(ZPG_X),, SEC, AND(ABS_Y),      ,,           , AND(ABS_X), ROL(ABS_X),,\n  /* 4- */ RTI     , EOR(IND_X),         ,,           , EOR(ZPG)  , LSR(ZPG)  ,, PHA, EOR(IMM)  , LSR_A,, JMP_ABS   , EOR(ABS)  , LSR(ABS)  ,,\n  /* 5- */ BVC     , EOR(IND_Y),         ,,           , EOR(ZPG_X), LSR(ZPG_X),, CLI, EOR(ABS_Y),      ,,           , EOR(ABS_X), LSR(ABS_X),,\n  /* 6- */ RTS     , ADC(IND_X),         ,,           , ADC(ZPG)  , ROR(ZPG)  ,, PLA, ADC(IMM)  , ROR_A,, JMP_IND   , ADC(ABS)  , ROR(ABS)  ,,\n  /* 7- */ BVS     , ADC(IND_Y),         ,,           , ADC(ZPG_X), ROR(ZPG_X),, SEI, ADC(ABS_Y),      ,,           , ADC(ABS_X), ROR(ABS_X),,\n  /* 8- */         , STA(IND_X),         ,, STY(ZPG)  , STA(ZPG)  , STX(ZPG)  ,, DEY,           , TXA  ,, STY(ABS)  , STA(ABS)  , STX(ABS)  ,,\n  /* 9- */ BCC     , STA(IND_Y),         ,, STY(ZPG_X), STA(ZPG_X), STX(ZPG_Y),, TYA, STA(ABS_Y), TXS  ,,           , STA(ABS_X),           ,,\n  /* A- */ LDY(IMM), LDA(IND_X), LDX(IMM),, LDY(ZPG)  , LDA(ZPG)  , LDX(ZPG)  ,, TAY, LDA(IMM)  , TAX  ,, LDY(ABS)  , LDA(ABS)  , LDX(ABS)  ,,\n  /* B- */ BCS     , LDA(IND_Y),         ,, LDY(ZPG_X), LDA(ZPG_X), LDX(ZPG_Y),, CLV, LDA(ABS_Y), TSX  ,, LDY(ABS_X), LDA(ABS_X), LDX(ABS_Y),,\n  /* C- */ CPY(IMM), CMP(IND_X),         ,, CPY(ZPG)  , CMP(ZPG)  , DEC(ZPG)  ,, INY, CMP(IMM)  , DEX  ,, CPY(ABS)  , CMP(ABS)  , DEC(ABS)  ,,\n  /* D- */ BNE     , CMP(IND_Y),         ,,           , CMP(ZPG_X), DEC(ZPG_X),, CLD, CMP(ABS_Y),      ,,           , CMP(ABS_X), DEC(ABS_X),,\n  /* E- */ CPX(IMM), SBC(IND_X),         ,, CPX(ZPG)  , SBC(ZPG)  , INC(ZPG)  ,, INX, SBC(IMM)  , NOP  ,, CPX(ABS)  , SBC(ABS)  , INC(ABS)  ,,\n  /* F- */ BEQ     , SBC(IND_Y),         ,,           , SBC(ZPG_X), INC(ZPG_X),, SED, SBC(ABS_Y),      ,,           , SBC(ABS_X), INC(ABS_X),,\n]\n\nfunction illegal_op(opcode: number) {\n  const hex = opcode.toString(16).padStart(2, '0')\n  return [\n    bind(console.warn, console, 'invalid op: 0x' + hex),\n    halt,\n  ]\n}\n\nfunction bundle_uops(uops: Uops) {\n  const props: PropertyDescriptorMap = {}\n\n  for (let i = 0; i < uops.length; i++) {\n    props[i] = { get: uops[i] }\n  }\n  const blk = Object.defineProperties([] as any[], props)\n  return bind(blk.includes, blk, halt())\n}\n\nfunction make_op_decoder() {\n  const props: PropertyDescriptorMap = {}\n\n  for (let i = 0; i < OP_TABLE.length; i++) {\n    const uops = OP_TABLE[i] || illegal_op(i)\n    props[i] = { get: bundle_uops(uops) }\n  }\n  return Object.defineProperties([] as boolean[], props)\n}\n\n// read op_decoder[i] to trigger OP_TABLE[i]\nconst op_decoder = make_op_decoder()\n\n// call run_op to read op_decoder[bus_reader[pc++]]\nconst run_op = arr_get(op_decoder, fetch_op)\n\nconst loop = Array(0xFFFFFFFF)\nconst run = bind(loop.findIndex, loop, run_op)\n\n\nconst LUT_EXIT_IF_FLAG_I = new Uint32Array(256)\n\nfor (let i = 0; i < 256; i++) {\n  if (i & STATUS.I) {\n    LUT_EXIT_IF_FLAG_I[i] = halt()\n  }\n}\n\nconst run_irq = bundle_uops([\n  int_arr_get(LUT_EXIT_IF_FLAG_I, load_sr),\n  ...push(pc_h),\n  ...push(pc_l),\n  ...push(sr),\n\n  set_flag(STATUS.I),\n  reg_store(pc_l, load_addr(0xFFFE)),\n  reg_store(pc_h, load_addr(0xFFFF)),\n  run,\n])\n\nconst run_nmi = bundle_uops([\n  ...push(pc_h),\n  ...push(pc_l),\n  ...push(sr),\n\n  reg_store(pc_l, load_addr(0xFFFA)),\n  reg_store(pc_h, load_addr(0xFFFB)),\n  run,\n])\n\nconst reset = bundle_uops([\n  reg_store(sr, STATUS.DEFAULT),\n  reg_store(sp, 0xFF),\n  reg_store(a, 0),\n  reg_store(x, 0),\n  reg_store(y, 0),\n  reg_store(pc_l, load_addr(0xFFFC)),\n  reg_store(pc_h, load_addr(0xFFFD)),\n  run,\n])\n\nfunction map_bus_read(addr: number, callback: Fn) {\n  Object.defineProperty(bus_reader, addr, {\n    get: callback,\n    configurable: true,\n  })\n}\n\nfunction map_bus_write(addr: number, callback: () => void) {\n  Object.defineProperty(bus_writer, addr, {\n    get: callback,\n    configurable: true,\n  })\n}\n\nfunction unmap_bus_read(addr: number) {\n  const prop = gen_bus_read_mem_prop(addr)\n  Object.defineProperty(bus_reader, addr, prop)\n}\n\nfunction unmap_bus_write(addr: number) {\n  const prop = gen_bus_write_mem_prop(addr)\n  Object.defineProperty(bus_writer, addr, prop)\n}\n\nexport default {\n  mem,\n  reg: {\n    a, x, y, sp, sr, pc, pcL: pc_l, pcH: pc_h,\n  },\n  bus: {\n    data: d,\n    mapRead: map_bus_read,\n    mapWrite: map_bus_write,\n    unmapRead: unmap_bus_read,\n    unmapWrite: unmap_bus_write,\n  },\n  num: {\n    a: load_a,\n    x: load_x,\n    y: load_y,\n    sr: load_sr,\n    sp: load_sp,\n    pc: load_pc,\n    pcL: load_pc_l,\n    pcH: load_pc_h,\n    busData: load_d,\n  },\n  runOp: run_op,\n  run,\n  reset,\n  irq: run_irq,\n  nmi: run_nmi,\n  getLoop: static_bind(Reflect.get, loop, 'length'),\n  setLoop: static_bind(Reflect.set, loop, 'length'),\n}"]}